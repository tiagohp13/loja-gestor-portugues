
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ptkqosrcopnsclgyrjqh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InB0a3Fvc3Jjb3Buc2NsZ3lyanFoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5Nzg2MzUsImV4cCI6MjA1OTU1NDYzNX0.02iDkud89OEj98hFFkOt8_QNhs_N6uqAXj4laoZi7Mk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY, 
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true
    },
    global: {
      fetch: fetch
    },
    db: {
      schema: 'public'
    },
    realtime: {
      params: {
        eventsPerSecond: 10
      }
    }
  }
);

// Utility function to convert Supabase snake_case to camelCase
export const snakeToCamel = (obj: any) => {
  if (typeof obj !== 'object' || obj === null) {
    return obj;
  }

  if (Array.isArray(obj)) {
    return obj.map(snakeToCamel);
  }

  return Object.keys(obj).reduce((result, key) => {
    const camelKey = key.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
    result[camelKey] = snakeToCamel(obj[key]);
    return result;
  }, {} as any);
};

// Add database functions for increment and decrement
export const increment = async (table: 'products' | 'categories' | 'counters', column: string, id: string, value: number) => {
  // Use raw query instead of RPC function due to type issues
  const { data, error } = await supabase
    .from(table)
    .select(column)
    .eq('id', id)
    .single();
  
  if (error) {
    console.error(`Error fetching ${column} in ${table}:`, error);
    return null;
  }
  
  const currentValue = data[column];
  const newValue = currentValue + value;
  
  const { data: updateData, error: updateError } = await supabase
    .from(table)
    .update({ [column]: newValue })
    .eq('id', id)
    .select(column)
    .single();
  
  if (updateError) {
    console.error(`Error incrementing ${column} in ${table}:`, updateError);
    return null;
  }
  
  return updateData[column];
};

export const decrement = async (table: 'products' | 'categories' | 'counters', column: string, id: string, value: number) => {
  // Use raw query instead of RPC function due to type issues
  const { data, error } = await supabase
    .from(table)
    .select(column)
    .eq('id', id)
    .single();
  
  if (error) {
    console.error(`Error fetching ${column} in ${table}:`, error);
    return null;
  }
  
  const currentValue = data[column];
  // Ensure we don't go below zero
  const newValue = Math.max(0, currentValue - value);
  
  const { data: updateData, error: updateError } = await supabase
    .from(table)
    .update({ [column]: newValue })
    .eq('id', id)
    .select(column)
    .single();
  
  if (updateError) {
    console.error(`Error decrementing ${column} in ${table}:`, updateError);
    return null;
  }
  
  return updateData[column];
};

// Add a type-safe function to insert data into Supabase tables
export const insertIntoTable = async (table: 'products' | 'categories' | 'clients' | 'suppliers', data: any) => {
  const { error } = await supabase
    .from(table)
    .insert(data);
    
  return { error };
};

// Add a type-safe function to update data in Supabase tables
export const updateTable = async (table: 'products' | 'categories' | 'clients' | 'suppliers', id: string, data: any) => {
  const { error } = await supabase
    .from(table)
    .update(data)
    .eq('id', id);
    
  return { error };
};

// Store deleted IDs temporarily to prevent reappearance through real-time updates
const deletedItemsCache: { [table: string]: Set<string> } = {
  stock_entries: new Set<string>(),
  stock_exits: new Set<string>(),
  orders: new Set<string>()
};

// Add an ID to the deleted items cache
export const addToDeletedCache = (table: string, id: string) => {
  if (!deletedItemsCache[table]) {
    deletedItemsCache[table] = new Set<string>();
  }
  deletedItemsCache[table].add(id);
};

// Check if an ID is in the deleted items cache
export const isInDeletedCache = (table: string, id: string): boolean => {
  if (!deletedItemsCache[table]) {
    return false;
  }
  return deletedItemsCache[table].has(id);
};

// Clear an ID from the deleted items cache (use this after successful deletion)
export const removeFromDeletedCache = (table: string, id: string) => {
  if (deletedItemsCache[table]) {
    deletedItemsCache[table].delete(id);
  }
};

// Filter an array to remove items that are in the deleted cache
export const filterDeletedItems = <T extends { id: string }>(table: string, items: T[]): T[] => {
  if (!deletedItemsCache[table]) {
    return items;
  }
  return items.filter(item => !deletedItemsCache[table].has(item.id));
};
