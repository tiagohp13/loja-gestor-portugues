
import { useData } from '@/contexts/DataContext';
import { useFormState } from './stockEntryForm/useFormState';
import { useFormHandlers } from './stockEntryForm/useFormHandlers';
import { useFilters } from './stockEntryForm/useFilters';
import { useSupplierSelect } from './stockEntryForm/useSupplierSelect';
import { useSubmit } from './stockEntryForm/useSubmit';
import { useCalculations } from './stockEntryForm/useCalculations';
import { UseStockEntryFormReturn } from './stockEntryForm/types';

export const useStockEntryForm = () => {
  const { 
    products, 
    suppliers, 
    addStockEntry, 
    updateStockEntry 
  } = useData();

  const {
    entryDetails,
    setEntryDetails,
    items,
    setItems,
    currentItem,
    setCurrentItem,
    searchTerm,
    setSearchTerm,
    selectedProductDisplay,
    setSelectedProductDisplay,
    isProductSearchOpen,
    setIsProductSearchOpen,
    isSupplierSearchOpen,
    setIsSupplierSearchOpen,
    supplierSearchTerm,
    setSupplierSearchTerm,
    entryDate,
    setEntryDate,
    calendarOpen,
    setCalendarOpen
  } = useFormState();
  
  const {
    handleEntryDetailsChange,
    handleItemChange,
    handleSearch,
    handleProductSelect,
    addItemToEntry,
    removeItem
  } = useFormHandlers({
    entryDetails,
    setEntryDetails,
    currentItem,
    setCurrentItem,
    items,
    setItems,
    selectedProductDisplay,
    setSelectedProductDisplay,
    setSearchTerm,
    setIsProductSearchOpen,
    setIsSupplierSearchOpen,
    products
  });
  
  const { handleSupplierSearch, handleSupplierSelect } = useSupplierSelect(
    setEntryDetails,
    setIsSupplierSearchOpen,
    suppliers
  );
  
  const { filteredProducts, filteredSuppliers } = useFilters({
    searchTerm,
    supplierSearchTerm,
    products,
    suppliers
  });
  
  const { totalValue } = useCalculations(items);
  
  // Form submission - Create wrapper functions that match the expected signatures
  const addStockEntryWrapper = async (entry: {
    supplierId: string;
    supplierName: string;
    items: any[];
    date: string;
    invoiceNumber: string;
    notes: string;
    total: number;
  }) => {
    // Convert to the format expected by the original addStockEntry
    const stockEntryData = {
      supplierId: entry.supplierId,
      supplierName: entry.supplierName,
      items: entry.items,
      date: entry.date,
      invoiceNumber: entry.invoiceNumber,
      notes: entry.notes,
      total: entry.total,
      number: '', // Will be generated by the addStockEntry function
      discount: 0
    };
    
    return await addStockEntry(stockEntryData);
  };

  const { handleSubmit: onSubmit, isSubmitting } = useSubmit({
    entryDetails,
    items,
    entryDate,
    suppliers,
    addStockEntry: addStockEntryWrapper,
    updateStockEntry
  });

  return {
    entryDetails,
    items,
    currentItem,
    searchTerm,
    selectedProductDisplay,
    isProductSearchOpen,
    isSupplierSearchOpen,
    supplierSearchTerm,
    entryDate,
    calendarOpen,
    filteredProducts,
    filteredSuppliers,
    totalValue,
    isSubmitting,
    setEntryDetails,
    setCurrentItem,
    setSearchTerm,
    setSelectedProductDisplay,
    setIsProductSearchOpen,
    setIsSupplierSearchOpen,
    setSupplierSearchTerm,
    setCalendarOpen,
    setEntryDate,
    handleEntryDetailsChange,
    handleItemChange,
    handleSearch,
    handleSupplierSearch,
    handleProductSelect,
    handleSupplierSelect,
    addItemToEntry,
    removeItem,
    onSubmit
  };
};
